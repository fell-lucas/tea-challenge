services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
    container_name: tea-challenge-api
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_PORT:-3000}
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongodb:27017/tea-challenge}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src:cached
      - ./package.json:/app/package.json:ro
      - ./pnpm-lock.yaml:/app/pnpm-lock.yaml:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./tsconfig.build.json:/app/tsconfig.build.json:ro
      - ./nest-cli.json:/app/nest-cli.json:ro
      # Exclude node_modules and dist from host
      - /app/node_modules
      - /app/dist
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - tea-challenge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mongodb:
    image: mongo:7.0
    container_name: tea-challenge-mongodb
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-tea-challenge}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - tea-challenge-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    container_name: tea-challenge-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      sh -c "
      if [ -n \"$$REDIS_PASSWORD\" ]; then
        redis-server --appendonly yes --requirepass \"$$REDIS_PASSWORD\"
      else
        redis-server --appendonly yes
      fi
      "
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - tea-challenge-network
    restart: unless-stopped
    healthcheck:
      test: >
        sh -c "
        if [ -n \"$$REDIS_PASSWORD\" ]; then
          redis-cli -a \"$$REDIS_PASSWORD\" ping
        else
          redis-cli ping
        fi
        "
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongo-express: # (Database management)
    image: mongo-express:1.0.2
    container_name: tea-challenge-mongo-express
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_ROOT_USERNAME:-admin}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_ROOT_PASSWORD:-password}
      - ME_CONFIG_MONGODB_URL=${MONGODB_URI:-mongodb://admin:password@mongodb:27017/}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME:-admin}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD:-pass}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - tea-challenge-network
    restart: unless-stopped

  redis-commander: # (Redis management)
    image: rediscommander/redis-commander:latest
    platform: linux/amd64
    container_name: tea-challenge-redis-commander
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - tea-challenge-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local

networks:
  tea-challenge-network:
    driver: bridge
