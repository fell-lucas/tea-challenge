name: CI with Service Containers

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test with Service Containers
    runs-on: ubuntu-latest

    # Service containers for MongoDB and Redis
    services:
      mongodb:
        image: mongo:8-noble
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: tea-challenge
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 30s

      redis:
        image: redis:8-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s

    env:
      NODE_ENV: test
      API_PORT: 3000
      MONGODB_URI: mongodb://admin:password@127.0.0.1:27017/tea-challenge?authSource=admin
      MONGODB_HOST: 127.0.0.1
      MONGODB_PORT: 27017
      MONGODB_DATABASE: tea-challenge
      MONGODB_ROOT_USERNAME: admin
      MONGODB_ROOT_PASSWORD: password
      REDIS_URL: redis://127.0.0.1:6379
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.0.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.17.1'
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Verify services are ready
        run: |
          echo "Verifying MongoDB connection..."
          timeout 60 bash -c 'until mongosh --host 127.0.0.1:27017 --username admin --password password --authenticationDatabase admin --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
          
          echo "Verifying Redis connection..."
          timeout 60 bash -c 'until redis-cli -h 127.0.0.1 -p 6379 ping > /dev/null 2>&1; do sleep 2; done'
          
          echo "✅ All services are ready!"

      - name: Build application
        run: pnpm build

      - name: Run unit tests
        run: pnpm test

      - name: Run e2e tests
        run: pnpm test:e2e

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-services
          path: coverage/
          retention-days: 7

  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.0.0'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.17.1'
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Check formatting
        run: |
          pnpm format
          if [ -n "$(git diff --name-only)" ]; then
            echo "❌ Code formatting issues found. Please run 'pnpm format' locally."
            git diff
            exit 1
          else
            echo "✅ Code formatting is correct."
          fi
